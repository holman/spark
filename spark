#!/usr/bin/env bash
#              bash 4.2.24(1)     Linux Ubuntu 12.04        Date : 2013-09-09
#
# _______________|  spark : "sparkline" character bar chart.
#
#           Usage:  spark [data: comma, space, or EOL delimited.]
#                   spark [-h|--help]
#
#        Examples:  % echo '-0.20, 0.08, 0.20, -0.20' | spark
#                   ▁▄█▁
#
#                   % spark 0 30 55 80 33 150
#                   ▁▂▃▅▂▇
#  
#                   % cat single_column.txt | spark   # read from file.
#  
#    Dependencies:  python2  (trivial conversion to python3 in comments)


#  CHANGE LOG  
#  2013-09-09  COMPLETE REWRITE using Python to fix resolution 
#                 ERRORS from truncation to integer esp. when 
#                 (max-min) < 8.   E.g. bond yield curve.
#                 Decimals in data are retained for accuracy. 
#                 The main logic is much clearer in Python.
#                 Revision by http://rsvp.github.com
#  2013-09-08  Fork from https://github.com/holman/spark
#                 which was inspired from web-based sparkline generator
#                 https://datacollective.org/sparkblocks
#
#                 Simple bar chart with eight-part resolution.


#           _____ PREAMBLE_v2: settings, variables, and error handling.
#
LC_ALL=POSIX
#      locale means "ASCII, US English, no special rules, 
#      output per ISO and RFC standards." 
#      Esp. use ASCII encoding for glob and sorting characters. 
shopt -s   extglob
#     ^set extended glob for pattern matching.
shopt -s   failglob
#         ^failed pattern matching signals error.
set -e
#   ^errors checked: immediate exit if a command has non-zero status. 
set -u
#   ^unassigned variables shall be errors.
#    Example of default VARIABLE ASSIGNMENT:  arg1=${1:-'foo'}


arg=${*:-`echo $(cat -)`}
#         ^converts piped data to single line.
#          This also permits EOL as delimiter for single column data.
#          Trade-off: "spark" without arguments will just stall :-)


program=${0##*/}   #  similar to using basename


cleanup () {
     #  Delete temporary files, then optionally exit given status.
     local status=${1:-'0'}
     [ $status = '-1' ] ||  exit $status      #  thus -1 prevents exit.
} #--------------------------------------------------------------------
warn () {
     #  Message with basename to stderr.          Usage: warn "message"
     echo -e "\n !!  ${program}: $1 "  >&2
} #--------------------------------------------------------------------
die () {
     #  Exit with status of most recent command or custom status, after
     #  cleanup and warn.      Usage: command || die "message" [status]
     local status=${2:-"$?"}
     cleanup -1  &&   warn "$1"  &&  exit $status
} #--------------------------------------------------------------------
trap "die 'SIG disruption, but cleanup finished.' 114" 1 2 3 15
#    Cleanup after INTERRUPT: 1=SIGHUP, 2=SIGINT, 3=SIGQUIT, 15=SIGTERM
#
# _______________     ::  BEGIN  Script ::::::::::::::::::::::::::::::::::::::::


help () {
cat <<EOHelp
         Usage:  spark [data: comma, space, or EOL delimited.]
                 spark [-h|--help]

      Examples:  % echo '-0.20, 0.08, 0.20, -0.20' | spark
                 ▁▄█▁

                 % spark 0 30 55 80 33 150
                 ▁▂▃▅▂▇

                 % cat single_column.txt | spark   # read from file.
EOHelp
}


if [ "$arg" == '-h' ] || [ "$arg" == '--help' ] ; then
     help
     cleanup
fi


if [ "$arg" = "${arg//,/}" ] ; then
     #  there are no commas in the argument, so let's add them 
     #  for the Python list format needed later:
     arg="${arg// /,}"
fi


python2 <<EOHereDoc
#  fileencoding=utf-8
bars = [ "▁", "▂", "▃", "▄", "▅", "▆", "▇", "█" ]
bins = 8

lst    = [$arg]
lmax   = max(lst)
lmin   = min(lst)
height = lmax - lmin
inc    = float(height) / bins
sparkline = ''
for x in lst:
     hit = bins-1
     #  Now let's put x into the appropriate bin...
     for i in range(bins):
          if x <= lmin + (inc*(i+1)):
               hit = i
               break
     sparkline += bars[hit]
print sparkline
EOHereDoc
     #  Conversion to python3 will only requires the following change:
     #  print(sparkline)



cleanup
# _______________ EOS ::  END of Script ::::::::::::::::::::::::::::::::::::::::

#  vim: set fileencoding=utf-8 ff=unix tw=78 ai syn=sh :
