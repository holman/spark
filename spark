#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# spark
# https://github.com/holman/spark
#
# Generates sparklines for a set of data.
#
# Here's a a good web-based sparkline generator that was a bit of inspiration
# for spark:
#
#   https://datacollective.org/sparkblocks
#
# spark takes a comma-separated list of data and then prints a sparkline out of
# it.
#
# Examples:
#
#   spark 1,5,22,13,53
#   # => ▁▁▃▂▇
#
#   spark 0,30,55,80,33,150
#   # => ▁▂▃▅▂▇
#
#   spark -h
#   # => Prints the spark help text.

import getopt
import math
import os
import re
import sys


def help():
    """
    Prints the help text for spark.

    Returns nothing.
    """

    print """

  USAGE:
    spark [comma,separated,value,list]

  EXAMPLES:
    spark 1,5,22,13,53
    ▁▁▃▂▇
    spark 0,30,55,80,33,150
    ▁▂▃▅▂▇
"""

# The actual fun characters we are generating in the sparkline.
ticks = [u"▁", u"▂", u"▃", u"▄", u"▅", u"▆", u"▇", u"█"]


class Data(object):
    """
    Container class which parses the string data from the
    user and caches all relevant values
    """

    def __init__(self, arg):
        self.arg = arg.strip()
        self.split = re.split("[,\s]+", self.arg)
        self.numbers = [float((x.strip())) for x in self.split]

        self.sorted = sorted(self.numbers)
        self.max = self.round(self.sorted[-1])
        self.min = self.round(self.sorted[0])
        self.number_of_ticks = len(ticks)
        self.distance = self.round(self.max / self.number_of_ticks)
        if self.distance == 0:
            self.distance = 1

    @staticmethod
    def round(num):
        return int("%.0f" % num)

    def print_tick(self, num):
        """
        Determines what tick we should print for this number and prints it.

        Returns nothing.
        """

        for i in range(self.number_of_ticks):

            number = self.round(num)
            less_than = (i * self.distance) + 0 + self.distance
            greater_than = (i - 1) * self.distance + 0 + self.distance
            result = (number <= less_than and number >= greater_than)

            if result:
                sys.stdout.write(ticks[i].encode("utf-8"))
                return

        sys.stdout.write(ticks[-1].encode("utf-8"))

    def print_ticks(self):
        """
        Iterate over all of our ticks and print them out.

        Returns nothing.
        """
        for number in self.numbers:
            self.print_tick(number)
        print


if __name__ == "__main__":
    args = sys.argv[1:]

    optlist, args = getopt.getopt(args, ':h')
    for k, v in optlist:
        if k == "-h":
            help()
            sys.exit(0)

    # Accept input from $1 or from the pipeline.
    if len(args) > 0:
        data = Data(args[0])
    else:
        # check to see if stdin's a tty
        if sys.stdin.isatty():
            help()
            sys.exit(0)
        data = Data(sys.stdin.read())

    data.print_ticks()
