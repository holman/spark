#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# spark
# https://github.com/holman/spark
#
# Generates sparklines for a set of data.
#
# Here's a a good web-based sparkline generator that was a bit of inspiration
# for spark:
#
#   https://datacollective.org/sparkblocks
#
# spark takes a comma-separated list of data and then prints a sparkline out of
# it.
#
# Examples:
#
#   spark 1,5,22,13,53
#   # => ▁▁▃▂▇
#
#   spark 0,30,55,80,33,150
#   # => ▁▂▃▅▂▇
#
#   spark -h
#   # => Prints the spark help text.

import sys, getopt, re, math, os

# Prints the help text for spark.
#
# Returns nothing.
def help():

  print """

  USAGE:
    spark [comma,separated,value,list]

  EXAMPLES:
    spark 1,5,22,13,53
    ▁▁▃▂▇
    spark 0,30,55,80,33,150
    ▁▂▃▅▂▇
"""

# The actual fun characters we are generating in the sparkline.
ticks=[u"▁", u"▂", u"▃", u"▄", u"▅", u"▆", u"▇", u"█"]

# The numbers the user gave us.
numbers=list()

# The sorted array of the numbers.
sorted_=list()

# This sets up our secondary array so we can actually generate the correct
# tick.
#
# Returns nothing.
def setup_array(data):
  global numbers
  global sorted_

  # 3,6,2 => 2,3,6
  sorted_=sorted(data)

  # convert comma-separated string to array
  numbers=list(data)

def round(num):
    return int("%.0f" % num)

# The maximum value of the sorted array. In other words, the last value.
def sort_max():
  return round(sorted_[-1])

# The minimum value of the sorted array. In other words, the first value.
def sort_min():
  return round(sorted_[0])

# Find the distance between tiers so we know which tick to assign a character.
def tier_():
  number_of_ticks=len(ticks)
  distance=sort_max() / number_of_ticks
  if distance == 0:
    distance=1
  return distance

# Determines what tick we should print for this number and prints it.
#
# Returns nothing.
def print_tick(number):
  tier=tier_()

  for i in range(len(ticks)):

    number = round(number)
    less_than=(i * tier) + 0 + tier
    greater_than=(i - 1) * tier + 0 + tier
    result=( number <= less_than and number >= greater_than )

    if result:
      sys.stdout.write(ticks[i].encode("utf-8"))
      return

  sys.stdout.write(ticks[-1].encode("utf-8"))

# Iterate over all of our ticks and print them out.
#
# Returns nothing.
def print_ticks(data):
  for number in numbers:
    print_tick(number)
  print

args = sys.argv[1:]

optlist, args = getopt.getopt(args, ':h')
for k, v in optlist:
    if k == "-h":
        help()
        sys.exit(0)

# Accept input from $1 or from the pipeline.
if len(args) > 0:
    data=args[0]
else:
  # check to see if stdin's a tty
  if sys.stdin.isatty():
    help()
    sys.exit(0)

  data=sys.stdin.read()

# Trim spaces to allow input like '1, 2, 3'
data = data.strip()
data=[float((x.strip())) for x in re.split("[,\s]+", data)]
setup_array(data)

print_ticks(data)
